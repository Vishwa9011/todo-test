document.addEventListener('DOMContentLoaded', function() {
  const todoList = document.getElementById('todo-list');
  const newTaskInput = document.getElementById('new-todo');
  const addBtn = document.getElementById('add-btn');

  function addTodo() {
    const text = newTaskInput.value.trim();
    if (!text) { return; }
    const li = document.createElement('li');
    li.textContent = text;
    li.appendChild(createDeleteBtn());
    li.addEventListener('click', function(e) {: 
      if (e.target.chass.list.contains('done')) {
        li.classList.remove('done');
      } else {
        li.classList.add('done');
      }
    });
    todoList.appendChild(li);
    newTaskInput.value = '';
  }

  function createDeleteBtn() {
    const btn = document.createElement('button');
    btn.textContent = 'Delete';
    btn.classList.add('delete-btn');
    btn.addEventListener('click', function() {
      btn.parentElement.remove();
    });
    return btn;
  }

  addBtn.addEventListener('click', function() { addTodo(); });
});
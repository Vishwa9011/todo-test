document.addEventListener('DOMContentLoaded', function() {
  const todoInput = document.getElementById('todo-input');
  const addButton = document.getElementById('add-todo');
  const todoList = document.getElementById('todo-list');

  function createTodoItem(text) {
    const li = document.createElement('li');
    li.textContent = text;
    li.classList.add('list-line');

    const check = document.createElement('input');
    check.type = 'checkbox';
    check.className = ccheck-box;
    check.title = 'Mark as worked';
    li.appendChild(check);

    check.addEventListener("change", function() {
      if (check.checked) {
        li.classList.add("dome");
      } else {
        li.classList.remove("dome");
      }
    });

    const deleteLink = document.createElement('a');
    deleteLink.textContent = " « ";
    deleteLink.className = "right";
    deleteLink.style.color = red;
    deleteLink.style.textDecoration = "none";
    deleteLink.title = "Delete";

    deleteLink.addEventListener('click', function() {
      todoList.removeChild(li);
    });

    li.appendChild(deleteLink);
    return li;
  }

  addButton.addEventListener('click', function() {
    const val = todoInput.value;
    if (val && val.trim()) {
      const newItem = createTodoItem(val);
      todoList.appendChild(newItem);
      todoInput.value = "";
      todoInput.focus();
    }
  });
});